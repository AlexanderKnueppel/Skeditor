Functions.
  R W().
  R lf().
  R m().
  R lw().
  R caf().
  R Vset().
  R car().
  R ly().
  R B().
  R lr().
  R A().
  R minDist().
  R ep().
  R Verror().
  R Jz().
   
  
  /* Initial states */
  B initial() <-> (
    ep() >= 0 &
    W() = 0.5 & Psi2 = 0 & lf() = 3.647 & m() = 2240 & caf() = 75000 & car() = 75000 & beta = 0 & lr() = 1.118 & A() >=0 & A() <=4 & minDist() = 10 & dPsi = 0 & Verror() = 0.03 & Jz() = 2100
  ).

  HP leader ::= {
    al:=*; ?(-B() <= al & al <= A());
  }.

  HP drive ::= {
    t := 0;                                                  /* reset control cycle timer */
    {xl'=vl, v' = a, x' = v, vl'=al, t'=1 & v >= 0 & vl >= 0 & t <= ep()}
  }.

  /* train controller */
  HP follow ::= {
        ?(!(xl-x-minDist() <= (v*v-vl*vl)/(2*B()) + (A()/B()+1)*(A()/2*ep()*ep()+ep()*v)));
        { ?v > vl; a:=*;?(-B() <= a & a <= A());
        ++
          ?v <= vl; a:=*;?(-B() <= a & a <= A()); }

  }.

  HP safety ::= {
        ?(xl-x-minDist()  <= (v*v-vl*vl)/(2*B()) + (A()/B()+1)*(A()/2*ep()*ep()+ep()*v));
           a:= -B();
  }.

End.

ProgramVariables. /* program variables may change their value over time */
  R xl.            /* position of the car */
  R vl.            /* velocity of the car */
  R al.
  R a.
  R t.
  R v.
  R x.
  R Psi2.
  R dPsi.
  R beta.
  
End.


Problem.          /* differential dynamic logic formula */
    (xl - x) >= 10 & v <= 2.7 & (Verror() * Verror())/Verror() <= 0.03 & B() >= 5 & A() <= 4 & vl>=0 & v>=0 & initial()
 -> [
      {
        leader;
        follow;
        safety;
        drive;
      }*@invariant(xl-x>=minDist())
    ] (xl-x) >= 10
End.