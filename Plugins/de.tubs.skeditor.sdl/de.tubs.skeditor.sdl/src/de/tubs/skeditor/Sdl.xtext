grammar de.tubs.skeditor.Sdl with org.eclipse.xtext.common.Terminals

generate sdl "http://www.tubs.de/skeditor/Sdl"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

SDLModel:
	{SDLModel}
	//'package' name=FQN
	(comment=AnnotationBlock)?
	(constants+=ConstantDef | types+=Type)*
	(skill=Skill);
	
Skill returns Skill:
	{Skill}
	(comment=AnnotationBlock)?
	(invocations+=Invocation)*
	'skill' name=STRING ':' type=SkillType
	'{'
	('version' version=Version)?
	(variables = Variables)?
	(parameters = Parameters)?
	//(propertyCollection = PropertyField)?
//	(invariants += Invariant)?
	(assumption = Assumption)?
	(guarantee = Guarantee)?
	//(hpprogram = HybridProgram)?
	//(behavior = Behavior)?
	(hma = HMA)?
	'}';

Variable:
	(comment=AnnotationBlock)?
	name=ID;

Guarantee:
	{Guarantee}
	'guarantee' ':' formula=Formula ';'
;

Assumption:
	{Assumption}
	'assumption' ':' formula=Formula ';'
;
	
Invocation:
	DynInvocation | CtrlInvocation
	;

CtrlInvocation:
	(comment=AnnotationBlock)?
	'ctrl' name=ID '('args+=InvocationArgument (',' args+=InvocationArgument)*')'
	'requires' req=Formula ';'
	'ensures' ens=Formula ';'
	':=' controller = Controller
;

DynInvocation:
	(comment=AnnotationBlock)?
	'dyn' name=ID '('args+=InvocationArgument (',' args+=InvocationArgument)*')'
	'requires' req=Formula ';'
	'ensures' ens=Formula ';'
	':=' dynamics = Dynamics
;

InvocationArgument:
	(comment=AnnotationBlock)?
	name=ID;

Invariant:
	'invariant' name=ID ':' invariant = STRING ';' 
;

Variables returns Variables:
	{Variables}
	'variables' '{'
	(requires = Requires)?
	(provides = Provides)?
	(locals = Locals)?
	'}'
;

Parameters returns Parameters:
	{Parameters}
	'parameters' '{'
	(vardecls+=VariableDeclarations)*
	'}'
;

VariableDeclarations:
	(variables+=Variable (',' variables+=Variable)* ':' type=VariableType ';')
;

VariableType:
	boolean = 'Boolean' |
	real = 'Real' 
;

//skill "Control dynamics" : Action {
/* Empty Skill Description */ 

//Variables { //interface, what about functions?
//	required {
//		real v;
//		real a;
//	}
//	defined {
//		//empty
//	}
//}
//
//Parameters { //from skill graph
//	real b;
//	real vmax;
//	real t;
//	real ep;
//}
//
//HybridProgram {
//	//Interface {}
//	Program := "
// 		R margin() = (ep*A).    
//  
// 		HP ctrl::= { 
//  			?vmax - v <= margin(); a := *; ?-b <= a & a <= 0;
//  		}.
//  
//  		HP drive::= {
//  			t := 0;
//    		{x' = v, v' = a, t' = 1 & v >= 0 & t <= ep}
//  		}.
//
//  		HP main ::= {ctrl; drive}";
//}


enum SkillType:
	SENSOR='Sensor' | ACTUATOR='Actuator' | PLANNING='Planning' | ACTION='Action' | OBSERVABLE='ObservableBehavior' |
	PERCEPTION='Perception' | ROOT='Main';

Version returns Version:
	{Version}
	'{'
	'major' major=INT
	'minor' minor=INT
	'}';
	
Requires returns Requires:
	{Requires}
	'input' '{'
	(vardecls+=VariableDeclarations)*
	'}'
;

Provides returns Provides:
	{Provides}
	'output' '{'
	(vardecls+=VariableDeclarations)*
	'}'
;

Locals returns Locals:
	{Locals}
	'locals' '{'
	(vardecls+=VariableDeclarations)*
	'}'
;

HybridProgram returns HybridProgram:
	{HybridProgram}
	'HybridProgram' '{'
		(interface = HPInterface)?
		('Program' '::=' program=STRING ';')?
		('Controller' '::=' controller=STRING ';')?
		('Plant' '::=' plant=STRING ';')?
	'}'
;

HPInterface returns HPInterface:
	{HPInterface}
		('Requires' ':' (requires+=HPInterfaceElement)*)
		('Provides' ':' (provides+=HPInterfaceElement)*)
	;
HPInterfaceElement returns HPInterfaceElement:
	{HPInterfaceElement}
		(hp?='HP'| bool?="Bool" | real?="Real") name=STRING alias?='as' aliasname=STRING ';'
	;

HMA returns HMA:
	{HMA}
	(comment=AnnotationBlock)?
	'Automaton' name=ID '.'
	('init' init=ID)
	(abstract_behaviors += AbstractBehavior)*
	(normal_behaviors += NormalBehavior)*
	'AutomatonEnd.'
;

NormalBehavior returns NormalBehavior:
	{NormalBehavior}
	(comment=AnnotationBlock)?
	'behavior' name=ID  '{'
	('controller' '{' controller=Controller (';' hasSmode?='smode' smodes+=SubMode ('||' smodes+=SubMode)*)?'}')
	('dynamics' '{' (dynamics=Dynamics|invocation=Invoke )'}')?
	('transitions' '{' (transitions+=Transition)* '}')?
	'}'
;

SubMode returns SubMode:
	{SubMode}
	name=ID ('[' bindings+=InputBinding (',' bindings+=InputBinding)* ']')? ('\\' '{' hidings+=OutputHiding (',' hidings+=OutputHiding)* '}')?
;

OutputHiding:
	Variable
;

InputBinding returns InputBinding:
	variable=Variable '->' value=Expression
;

AbstractBehavior returns AbstractBehavior:
	{AbstractBehavior}
	(comment=AnnotationBlock)?
	'abstract_behavior' name=ID  '{'
	hoare=Hoare
	('transitions' '{' (transitions+=Transition)* '}')?
	'}'
;

Controller returns Controller:
	{Controller}
	(comment=AnnotationBlock)?
	stmt += Statement (';' stmt += Statement)*
	;
	
Statement:
	Assignment
	| {SkipStatement} Skip
	| IfThenElse
	| Havoc
	| Assume
	| Assert
	| Invoke
	| Hoare
	;

Assignment:
	variable=Variable ':=' expr=Expression
;

Skip:
	'skip'
;

Havoc:
	'havoc' variables+=Variable (',' variables+=Variable)*
;

Assume:
	'assume' formula=Formula
;

Assert:
	'assert' formula=Formula
;

IfThenElse:
  'if' expression=Formula
  '{' ifcase=Controller '}'
  'else' '{' elsecase=Controller '}'
;

Hoare:
  '(|' preconditon=Formula '|)'
  identifier = ID
  '(|' postcondition=Formula '|)'
  (frame?='['framevars+=Variable (',' framevars+=Variable)* ']')?
;

Invoke:
	'invoke' call=InvocationFunction
;

InvocationFunction:
  name=ID '('args+=InvocationArgument (',' args+=InvocationArgument)*')'
;

Transition returns Transition:
	{Transition}
	(comment=AnnotationBlock)?
	'on' '{' when=Formula '}' '->' toState=ID ';'
;

Dynamics returns Dynamics:
	{Dynamics}
	(comment=AnnotationBlock)?
	'{' (ode+=ODE (',' ode+=ODE)* ) ('&' evolution=Formula)? '}'
	| (ode+=ODE (',' ode+=ODE)* ) ('&' evolution=Formula)?
;

ODE returns ODE:
	{ODE}
	variable=ODEID '=' expression=Expression
	;

Expression returns Expression:
	Addition
	;
	
Addition returns Expression:
  Multiplication
  (=>({Plus.left=current} '+' | {Minus.left=current} '-')
  right=Multiplication)*;
  
Multiplication returns Expression:
  Power 
  (({MultiOrDivOrMod.left=current} op=("*"|"/"|"%")) right=Power)*;
  
Power returns Expression:
  Prefixed 
  (({Power.left=current} op=("^")) right=Prefixed)*;
  
Prefixed returns Expression:
  {BooleanNegation} "!" expression=Atomic | /* right associativity */
  {ArithmeticSigned} '-' expression=Atomic | /* right associativity */
  Atomic;
  //TODO: unary addition operator can be supported in ArithmeticSigned

Atomic returns Expression:
  LiteralExpression |	
  ParenthesizedExpression |
  {FunctionReference} ref=Function | 
  {VariableReference} ref=Variable 
;

Function:
  Past | Min | Max | Forall | Exists | Abs
;

Past:
  'past(' variable = ID ')'
;
Min:
  'min(' exp1=Expression ',' exp2=Expression ')'
;
Max:
  'max(' exp1=Expression ',' exp2=Expression ')'
;
Abs:
  'abs(' exp1=Expression ')'
;
Forall:
  '\\forall' variable=Variable ':' formula=Formula
;
Exists:
  '\\exists' variable=Variable ':' formula=Formula
;


LiteralExpression:
  {NumberLiteral} value=REAL |
  {VariableLiteral} value=ID |
  {StringLiteral} value=STRING |
  {NullLiteral} value= 'null' |
  {BooleanLiteral} value=('true'|'false')
;

ParenthesizedExpression returns Expression:
	{ParenthesizedExpression}
	'(' expr=Expression ')'
;

Formula returns Formula:
	BooleanFormula 
;

BooleanFormula returns Formula:
  Comparison
  (({BooleanExpression.left=current} op=("||"|"&&"|"and"|"or"|"->"|"<->"|"implies"|"equals")) right=Comparison)*;
  
Comparison returns Formula:
  Equals
  (({Comparison.left=current} op=("<" | ">" | "<=" | ">=")) right=Equals)*;

Equals returns Formula:
  Expression
  (({Equals.left=current} op=("==" | "!=" | "=~" | "!~" | "is")) right=Expression)*;


Argument:
	(comment=AnnotationBlock)?
	type=TypeRef (array?='[' ']')? name=ID;
//
//Property:
//	implementation=Implementation | program = Program | source = SourceFile 
//;
//
//SourceFile:
//	'SourceFile' '=>' file=STRING ';'
//;
//
//Program:
//	'program' '{' content=STRING '}'
//;
//
//Implementation:
//	'ImplementationTechnique' '=>' technique=BasicImplTechnique ';'
//;
//
//enum BasicImplTechnique returns BasicImplTechnique:
//	HybridProgram = 'HybridProgram' |
//	ROSComponent = 'ROSComponent';
	
//HPProgram returns HPProgram:
//	'HybridProgram' '{' content=STRING '}'
//;

Import:
	'import' (importedNamespace=ImportedFQN 'from' | 'model') importURI=STRING;

ImportedFQN:
	FQN ('.' '*')?;
	
// **************************************************************
// type system

TypeRef returns TypeRef:
	predefined=BasicTypeId | interval=IntegerInterval;

enum BasicTypeId returns BasicTypeId:
	undefined = 'undefined' |
	Int8 = 'Int8' |
	UInt8 = 'UInt8' |
	Int16 = 'Int16' |
	UInt16 = 'UInt16' |
	Int32 = 'Int32' |
	UInt32 = 'UInt32' |
	Int64 = 'Int64' |
	UInt64 = 'UInt64' |
	Boolean = 'Boolean' |
	String = 'String' |
	Float = 'Float' |
	Double = 'Double' |
	ByteBuffer = 'ByteBuffer' ;
	
IntegerInterval returns IntegerInterval:
	{IntegerInterval}
	'Integer' ('(' (lowerBound=INTERVAL_BOUND | 'minInt') ',' (upperBound=INTERVAL_BOUND | 'maxInt') ')')?
;

INTERVAL_BOUND returns ecore::EBigInteger:
	'-'? INT;
	
Type returns Type:
	ArrayType |
	//EnumerationType |
	StructType |
	UnionType |
	MapType;
	
ArrayType returns ArrayType:
	{ArrayType}
	(comment=AnnotationBlock)?
	'array' name=ID 'of' elementType=TypeRef;

StructType returns StructType:
	{StructType}
	(comment=AnnotationBlock)?
	'struct' name=ID
		(
			('extends' base=[StructType|FQN]) |
			(polymorphic?='polymorphic')
		)?
	'{'
		(elements+=Field)*
    '}';

UnionType returns UnionType:
	{UnionType}
	(comment=AnnotationBlock)?
	(public?='public')? 'union' name=ID ('extends' base=[UnionType|FQN])?
	'{'
		(elements+=Field)*
    '}';
    
Field:
	(comment=AnnotationBlock)?
	type=TypeRef (array?='[' ']')? name=ID;

MapType returns MapType:
	{MapType}
	(comment=AnnotationBlock)?
	(public?='public')? 'map' name=ID '{'
		keyType=TypeRef 'to' valueType=TypeRef
	'}';


//TypedElement:
//	Field |
//	Attribute |
//	Argument |
//	Declaration |
//	ConstantDef;#

// **************************************************************
// constant definitions and initializers

ConstantDef:
	(comment=AnnotationBlock)?
	'const' type=TypeRef (array?='[' ']')? name=ID '='
		rhs=InitializerExpression
	;

InitializerExpression:
	//LogicalOrExpression |
	Initializer;

Initializer:
	CompoundInitializer |
	BracketInitializer;

// this is used for struct and union types
CompoundInitializer:
	{CompoundInitializer}
	'{' (
		elements+=FieldInitializer
		(',' elements+=FieldInitializer)*
	)? '}';

FieldInitializer:
	element=[Field|ID] ':' value=InitializerExpression;

// this is used for array and map types
BracketInitializer:
	{BracketInitializer}
	'[' (
		elements+=ElementInitializer
		(',' elements+=ElementInitializer)*
	)? ']';

// for array type initializers, the second element is omitted
ElementInitializer:
	{ElementInitializer}
	first=InitializerExpression ('=>' second=InitializerExpression)?;

	
FQN:
	ID ('.' ID)*;

AnnotationBlock returns AnnotationBlock:
	'/*' (elements+=Annotation)+ '*/';

Annotation returns Annotation:
	rawText=ANNOTATION_STRING;

	// this is used for overloaded FMethod and FBroadcast
ID_WITH_SELECTOR:
	ID (':' ID)?;

	// **************************************************************
// basic types
Boolean returns ecore::EBoolean:
	'false' | 'true';
	
	
REAL returns ecore::EDoubleObject:
	'-'? INT | '-'? INT '.' INT ('e' '-'? INT)?;
	
terminal ODEID:
	ID'\''
;

E_BigInteger returns ecore::EBigInteger:
	INT | HEX | BINARY;

terminal E_DOUBLE_OBJECT returns ecore::EDoubleObject:
	INT '.' INT ('e' '-'? INT)? 'd';


terminal E_FLOAT_OBJECT returns ecore::EFloatObject:
	INT '.' INT ('e' '-'? INT)? 'f';

terminal HEX:
	('0x' | '0X') (('0'..'9') | ('a'..'f') | ('A'..'F'))+;

terminal BINARY:
	('0b' | '0B') ('0' | '1')+;
	
	
//terminal fragment DIGIT: '0'..'9';

//terminal fragment EXPONENT: 'e' ('+'|'-')? DIGIT+;
//terminal INTEGER returns ecore::EInt: '-'? DIGIT+;
//terminal FLOAT returns ecore::EFloat: INTEGER ('.' DIGIT* EXPONENT?)?;
	

terminal ANNOTATION_STRING returns ecore::EString:
	'@' (('a'..'z') | '-')+ (' ' | '\t')* ':'
	(('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\')) | ('\\*' | '\\@') | !('\\' | '*' | '@'))*;